{
	"info": {
		"_postman_id": "eaa6f529-4462-4c50-8c50-a31baab9dea0",
		"name": "Logique",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "741147",
		"_collection_link": "https://kunyil.postman.co/workspace/Artolanggeng-Solusi-Inovasi~21bf15f1-a8ee-44a6-ac4f-5e1de88faaf2/collection/741147-eaa6f529-4462-4c50-8c50-a31baab9dea0?action=share&source=collection_link&creator=741147"
	},
	"item": [
		{
			"name": "Auth",
			"item": [
				{
					"name": "Generate Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Html status code\r",
									"pm.test(`HTML status code -> ${pm.response.code} ${pm.response.status}`, function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 400, 401, 403, 404, 500, 503]);\r",
									"});\r",
									"\r",
									"// Check request header has authorization\r",
									"pm.test(\"Header authorization exist\", function () {\r",
									"    pm.request.headers.has(\"Authorization\");\r",
									"});\r",
									"\r",
									"// Check authorization type is basic\r",
									"pm.test('Authorization type is basic', function () {\r",
									"\tconst token = pm.request.headers.get('Authorization') ? pm.request.headers.get('Authorization').split(\" \")[0] : \"\";\r",
									"    pm.expect(token).to.equal(\"Basic\");\r",
									"});\r",
									"\r",
									"// Check basic token not empty\r",
									"pm.test(\"Basic token not empty\", function () {\r",
									"\tconst token = pm.request.headers.get('Authorization') ? pm.request.headers.get('Authorization').split(\" \")[1] : \"empty\";\r",
									"    pm.expect(token).not.to.equal(\"empty\");\r",
									"});\r",
									"\r",
									"// Check http method POST\r",
									"pm.test(\"HTTP method is POST\", function () {\r",
									"    pm.expect(pm.request.method).to.equal(\"POST\");\r",
									"});\r",
									"\r",
									"// Check path for create token\r",
									"pm.test(\"Path for create token (auth/token)\", function () {\r",
									"    pm.expect(pm.request.url.path.join().replace(/,/g, \"/\")).to.equal(\"auth/token\");\r",
									"});\r",
									"\r",
									"// Check Key=grant_type at the encoded body\r",
									"pm.test(\"Key=grant_type at the encoded body is exist\", function () {\r",
									"    pm.expect(pm.request.body.urlencoded.toObject(true)).haveOwnProperty(\"grant_type\");\r",
									"});\r",
									"\r",
									"// Check Value=client_credentials at the encoded body\r",
									"pm.test(\"Value=client_credentials at the encoded body is exist\", function () {\r",
									"    pm.expect(pm.request.body.urlencoded.toObject(true).grant_type).to.equal('client_credentials');\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(pm.response.text());\r",
									"console.log(\"Response ->\", jsonData);\r",
									"\r",
									"if (jsonData?.data && jsonData?.data?.tokenData) {\r",
									"    pm.environment.set(\"token\", jsonData.data.tokenData);\r",
									"}\r",
									"else\r",
									"    pm.environment.set(\"token\", \"\");\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "grant_type",
									"value": "client_credentials",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{localhost}}/auth/token",
							"host": [
								"{{localhost}}"
							],
							"path": [
								"auth",
								"token"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Books",
			"item": [
				{
					"name": "Search data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Html status code\r",
									"pm.test(`HTML status code -> ${pm.response.code} ${pm.response.status}`, function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 400, 401, 403, 404, 500, 503]);\r",
									"});\r",
									"\r",
									"// Check request header has authorization\r",
									"pm.test(\"Header authorization exist\", function () {\r",
									"    pm.request.headers.has(\"Authorization\");\r",
									"});\r",
									"\r",
									"// Check authorization type is bearer\r",
									"pm.test('Authorization type is bearer', function () {\r",
									"\tconst token = pm.request.headers.get('Authorization') ? pm.request.headers.get('Authorization').split(\" \")[0] : \"\";\r",
									"    pm.expect(token).to.equal(\"Bearer\");\r",
									"});\r",
									"\r",
									"// Check bearer token not empty\r",
									"pm.test(\"Bearer token not empty\", function () {\r",
									"\tconst token = pm.request.headers.get('Authorization') ? pm.request.headers.get('Authorization').split(\" \")[1] : \"empty\";\r",
									"    pm.expect(token).not.to.equal(\"empty\");\r",
									"});\r",
									"\r",
									"// Check http method GET\r",
									"pm.test(\"HTTP method is GET\", function () {\r",
									"    pm.expect(pm.request.method).to.equal(\"GET\");\r",
									"});\r",
									"\r",
									"// Check path for search all data\r",
									"pm.test(\"Path for search all data (/books)\", function () {\r",
									"    pm.expect(pm.request.url.path.join().replace(/,/g, \"/\")).to.equal(\"books\");\r",
									"});\r",
									"\r",
									"// Check path for search data with range\r",
									"pm.test(\"Path for search data with range\", function () {\r",
									"    var query = pm.request.url.query == 0 ? \"empty\" : pm.request.url.query.toString();\r",
									"    pm.expect(query).not.to.equal(\"empty\");\r",
									"});\r",
									"\r",
									"// Check parameter with query param is search\r",
									"pm.test(\"Query search at parameter is exist\", function () {\r",
									"    pm.expect(pm.request.url.query.toObject(true)).haveOwnProperty(\"search\");\r",
									"});\r",
									"\r",
									"// Check parameter with query param is page\r",
									"pm.test(\"Query page at parameter is exist\", function () {\r",
									"    pm.expect(pm.request.url.query.toObject(true)).haveOwnProperty(\"page\");\r",
									"});\r",
									"\r",
									"// Check parameter with query param is limit\r",
									"pm.test(\"Query limit at parameter is exist\", function () {\r",
									"    pm.expect(pm.request.url.query.toObject(true)).haveOwnProperty(\"limit\");\r",
									"});\r",
									"\r",
									"// Check parameter with query param is page\r",
									"pm.test(\"Query page at parameter is number and above 0\", function () {\r",
									"    const page = pm.request.url ? pm.request.url.query.toObject(true).page : \"empty\"\r",
									"    pm.expect(Number(page)).to.be.above(0);\r",
									"    pm.expect(Number(page)).to.be.a('number');\r",
									"    pm.expect(page).not.to.equal(\"empty\");\r",
									"    pm.expect(page).not.to.equal(undefined);\r",
									"    pm.expect(page).not.to.equal(\"\");\r",
									"});\r",
									"\r",
									"// Check parameter with query param is limit\r",
									"pm.test(\"Query limit at parameter is number and above 0\", function () {\r",
									"    const limit = pm.request.url ? pm.request.url.query.toObject(true).limit : \"empty\"\r",
									"    pm.expect(Number(limit)).to.be.above(0);\r",
									"    pm.expect(Number(limit)).to.be.a('number');\r",
									"    pm.expect(limit).not.to.equal(\"empty\");\r",
									"    pm.expect(limit).not.to.equal(undefined);\r",
									"    pm.expect(limit).not.to.equal(\"\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{localhost}}/books?search=pekerjaan&page=1&limit=1",
							"host": [
								"{{localhost}}"
							],
							"path": [
								"books"
							],
							"query": [
								{
									"key": "search",
									"value": "pekerjaan"
								},
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "limit",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Html status code\r",
									"pm.test(`HTML status code -> ${pm.response.code} ${pm.response.status}`, function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 400, 401, 403, 404, 500, 503]);\r",
									"});\r",
									"\r",
									"// Check request header has authorization\r",
									"pm.test(\"Header authorization exist\", function () {\r",
									"    pm.request.headers.has(\"Authorization\");\r",
									"});\r",
									"\r",
									"// Check authorization type is bearer\r",
									"pm.test('Authorization type is bearer', function () {\r",
									"\tconst token = pm.request.headers.get('Authorization') ? pm.request.headers.get('Authorization').split(\" \")[0] : \"\";\r",
									"    pm.expect(token).to.equal(\"Bearer\");\r",
									"});\r",
									"\r",
									"// Check bearer token not empty\r",
									"pm.test(\"Bearer token not empty\", function () {\r",
									"\tconst token = pm.request.headers.get('Authorization') ? pm.request.headers.get('Authorization').split(\" \")[1] : \"empty\";\r",
									"    pm.expect(token).not.to.equal(\"empty\");\r",
									"});\r",
									"\r",
									"// Check http method GET\r",
									"pm.test(\"HTTP method is GET\", function () {\r",
									"    pm.expect(pm.request.method).to.equal(\"GET\");\r",
									"});\r",
									"\r",
									"// Check path for search all data\r",
									"pm.test(\"Path for search all data (/books)\", function () {\r",
									"    pm.expect(pm.request.url.path.join().replace(/,/g, \"/\")).to.equal(\"books\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{localhost}}/books",
							"host": [
								"{{localhost}}"
							],
							"path": [
								"books"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Html status code\r",
									"pm.test(`HTML status code -> ${pm.response.code} ${pm.response.status}`, function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 400, 401, 403, 404, 500, 503]);\r",
									"});\r",
									"\r",
									"// Check request header has authorization\r",
									"pm.test(\"Header authorization exist\", function () {\r",
									"    pm.request.headers.has(\"Authorization\");\r",
									"});\r",
									"\r",
									"// Check authorization type is bearer\r",
									"pm.test('Authorization type is bearer', function () {\r",
									"\tconst token = pm.request.headers.get('Authorization') ? pm.request.headers.get('Authorization').split(\" \")[0] : \"\";\r",
									"    pm.expect(token).to.equal(\"Bearer\");\r",
									"});\r",
									"\r",
									"// Check bearer token not empty\r",
									"pm.test(\"Bearer token not empty\", function () {\r",
									"\tconst token = pm.request.headers.get('Authorization') ? pm.request.headers.get('Authorization').split(\" \")[1] : \"empty\";\r",
									"    pm.expect(token).not.to.equal(\"empty\");\r",
									"});\r",
									"\r",
									"// Check http method GET\r",
									"pm.test(\"HTTP method is GET\", function () {\r",
									"    pm.expect(pm.request.method).to.equal(\"GET\");\r",
									"});\r",
									"\r",
									"// Check path for search data\r",
									"pm.test(\"Path for search data (/books)\", function () {\r",
									"    pm.expect(pm.request.url.path[0]).to.equal(\"books\");\r",
									"});\r",
									"\r",
									"// Check parameter is book id\r",
									"pm.test(\"Parameter book id is number and above 0\", function () {\r",
									"    const bookID = pm.request.url ? pm.request.url.path[1] : \"empty\"\r",
									"    pm.expect(Number(bookID)).to.be.above(0);\r",
									"    pm.expect(Number(bookID)).to.be.a('number');\r",
									"    pm.expect(bookID).not.to.equal(\"empty\");\r",
									"    pm.expect(bookID).not.to.equal(undefined);\r",
									"    pm.expect(bookID).not.to.equal(\"\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{localhost}}/books/3",
							"host": [
								"{{localhost}}"
							],
							"path": [
								"books",
								"3"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Html status code\r",
									"pm.test(`HTML status code -> ${pm.response.code} ${pm.response.status}`, function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 400, 401, 403, 404, 500, 503]);\r",
									"});\r",
									"\r",
									"// Check request header has authorization\r",
									"pm.test(\"Header authorization exist\", function () {\r",
									"    pm.request.headers.has(\"Authorization\");\r",
									"});\r",
									"\r",
									"// Check authorization type is bearer\r",
									"pm.test('Authorization type is bearer', function () {\r",
									"\tconst token = pm.request.headers.get('Authorization') ? pm.request.headers.get('Authorization').split(\" \")[0] : \"\";\r",
									"    pm.expect(token).to.equal(\"Bearer\");\r",
									"});\r",
									"\r",
									"// Check bearer token not empty\r",
									"pm.test(\"Bearer token not empty\", function () {\r",
									"\tconst token = pm.request.headers.get('Authorization') ? pm.request.headers.get('Authorization').split(\" \")[1] : \"empty\";\r",
									"    pm.expect(token).not.to.equal(\"empty\");\r",
									"});\r",
									"\r",
									"// Check http method DELETE\r",
									"pm.test(\"HTTP method is DELETE\", function () {\r",
									"    pm.expect(pm.request.method).to.equal(\"DELETE\");\r",
									"});\r",
									"\r",
									"// Check path for search data\r",
									"pm.test(\"Path for search data (/books)\", function () {\r",
									"    pm.expect(pm.request.url.path[0]).to.equal(\"books\");\r",
									"});\r",
									"\r",
									"// Check parameter is book id\r",
									"pm.test(\"Parameter book id is number and above 0\", function () {\r",
									"    const bookID = pm.request.url ? pm.request.url.path[1] : \"empty\"\r",
									"    pm.expect(Number(bookID)).to.be.above(0);\r",
									"    pm.expect(Number(bookID)).to.be.a('number');\r",
									"    pm.expect(bookID).not.to.equal(\"empty\");\r",
									"    pm.expect(bookID).not.to.equal(undefined);\r",
									"    pm.expect(bookID).not.to.equal(\"\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{localhost}}/books/12",
							"host": [
								"{{localhost}}"
							],
							"path": [
								"books",
								"12"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Html status code\r",
									"pm.test(`HTML status code -> ${pm.response.code} ${pm.response.status}`, function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 400, 401, 403, 404, 500, 503]);\r",
									"});\r",
									"\r",
									"// Check request header has authorization\r",
									"pm.test(\"Header authorization exist\", function () {\r",
									"    pm.request.headers.has(\"Authorization\");\r",
									"});\r",
									"\r",
									"// Check authorization type is bearer\r",
									"pm.test('Authorization type is bearer', function () {\r",
									"\tconst token = pm.request.headers.get('Authorization') ? pm.request.headers.get('Authorization').split(\" \")[0] : \"\";\r",
									"    pm.expect(token).to.equal(\"Bearer\");\r",
									"});\r",
									"\r",
									"// Check bearer token not empty\r",
									"pm.test(\"Bearer token not empty\", function () {\r",
									"\tconst token = pm.request.headers.get('Authorization') ? pm.request.headers.get('Authorization').split(\" \")[1] : \"empty\";\r",
									"    pm.expect(token).not.to.equal(\"empty\");\r",
									"});\r",
									"\r",
									"// Check http method PUT\r",
									"pm.test(\"HTTP method is PUT\", function () {\r",
									"    pm.expect(pm.request.method).to.equal(\"PUT\");\r",
									"});\r",
									"\r",
									"// Check path for search data\r",
									"pm.test(\"Path for search data (/books)\", function () {\r",
									"    pm.expect(pm.request.url.path[0]).to.equal(\"books\");\r",
									"});\r",
									"\r",
									"// Check parameter is book id\r",
									"pm.test(\"Parameter book id is number and above 0\", function () {\r",
									"    const bookID = pm.request.url ? pm.request.url.path[1] : \"empty\"\r",
									"    pm.expect(Number(bookID)).to.be.above(0);\r",
									"    pm.expect(Number(bookID)).to.be.a('number');\r",
									"    pm.expect(bookID).not.to.equal(\"empty\");\r",
									"    pm.expect(bookID).not.to.equal(undefined);\r",
									"    pm.expect(bookID).not.to.equal(\"\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"author\": \"Ignat\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{localhost}}/books/14",
							"host": [
								"{{localhost}}"
							],
							"path": [
								"books",
								"14"
							]
						}
					},
					"response": []
				},
				{
					"name": "New data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Html status code\r",
									"pm.test(`HTML status code -> ${pm.response.code} ${pm.response.status}`, function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 400, 401, 403, 404, 500, 503]);\r",
									"});\r",
									"\r",
									"// Check request header has authorization\r",
									"pm.test(\"Header authorization exist\", function () {\r",
									"    pm.request.headers.has(\"Authorization\");\r",
									"});\r",
									"\r",
									"// Check authorization type is bearer\r",
									"pm.test('Authorization type is bearer', function () {\r",
									"\tconst token = pm.request.headers.get('Authorization') ? pm.request.headers.get('Authorization').split(\" \")[0] : \"\";\r",
									"    pm.expect(token).to.equal(\"Bearer\");\r",
									"});\r",
									"\r",
									"// Check bearer token not empty\r",
									"pm.test(\"Bearer token not empty\", function () {\r",
									"\tconst token = pm.request.headers.get('Authorization') ? pm.request.headers.get('Authorization').split(\" \")[1] : \"empty\";\r",
									"    pm.expect(token).not.to.equal(\"empty\");\r",
									"});\r",
									"\r",
									"// Check http method POST\r",
									"pm.test(\"HTTP method is POST\", function () {\r",
									"    pm.expect(pm.request.method).to.equal(\"POST\");\r",
									"});\r",
									"\r",
									"// Check path for search data\r",
									"pm.test(\"Path for search data (/books)\", function () {\r",
									"    pm.expect(pm.request.url.path[0]).to.equal(\"books\");\r",
									"});\r",
									"\r",
									"// Check body data not empty and must exist\r",
									"pm.test(\"Body data is a must\", function () {\r",
									"\tconst body = pm.request.body ? JSON.parse(pm.request.body.raw) : \"empty\";\r",
									"    pm.expect(body).not.to.equal(\"empty\");\r",
									"    pm.expect(body).not.to.equal(undefined);\r",
									"    pm.expect(body).not.to.equal(\"\");\r",
									"});\r",
									"\r",
									"// Check title key at the body\r",
									"pm.test(\"Title key at the body is a must\", function () {\r",
									"\tconst title = pm.request.body ? JSON.parse(pm.request.body.raw) : \"empty\";\r",
									"    pm.expect(title).haveOwnProperty(\"title\");\r",
									"});\r",
									"\r",
									"// Check title value at the body\r",
									"pm.test(\"Title at the body not empty and must a string type\", function () {\r",
									"\tconst title = pm.request.body ? JSON.parse(pm.request.body.raw).title : \"empty\";\r",
									"    pm.expect(title).not.to.equal(\"empty\");\r",
									"    pm.expect(title).not.to.equal(undefined);\r",
									"    pm.expect(title).not.to.equal(\"\");\r",
									"    pm.expect(title).to.be.a('string');\r",
									" });\r",
									"\r",
									"// Check author key at the body\r",
									"pm.test(\"Author key at the body is a must\", function () {\r",
									"\tconst author = pm.request.body ? JSON.parse(pm.request.body.raw) : \"empty\";\r",
									"    pm.expect(author).haveOwnProperty(\"author\");\r",
									"});\r",
									"\r",
									"// Check author value at the body\r",
									"pm.test(\"Author at the body not empty and must a string type\", function () {\r",
									"\tconst author = pm.request.body ? JSON.parse(pm.request.body.raw).author : \"empty\";\r",
									"    pm.expect(author).not.to.equal(\"empty\");\r",
									"    pm.expect(author).not.to.equal(undefined);\r",
									"    pm.expect(author).not.to.equal(\"\");\r",
									"    pm.expect(author).to.be.a('string');\r",
									" });\r",
									"\r",
									"// Check publishedYear key at the body\r",
									"pm.test(\"PublishedYear key at the body is a must\", function () {\r",
									"\tconst publishedYear = pm.request.body ? JSON.parse(pm.request.body.raw) : \"empty\";\r",
									"    pm.expect(publishedYear).haveOwnProperty(\"publishedYear\");\r",
									"});\r",
									"\r",
									"// Check publishedYear value at the body\r",
									"pm.test(\"PublishedYear at the body not empty and must a number type\", function () {\r",
									"\tconst publishedYear = pm.request.body ? JSON.parse(pm.request.body.raw).publishedYear : \"empty\";\r",
									"    pm.expect(publishedYear).not.to.equal(\"empty\");\r",
									"    pm.expect(publishedYear).not.to.equal(undefined);\r",
									"    pm.expect(publishedYear).not.to.equal(\"\");\r",
									"    pm.expect(publishedYear).to.be.a('number');\r",
									" });\r",
									"\r",
									"// Check stock key at the body\r",
									"pm.test(\"Stock key at the body is a must\", function () {\r",
									"\tconst stock = pm.request.body ? JSON.parse(pm.request.body.raw) : \"empty\";\r",
									"    pm.expect(stock).haveOwnProperty(\"stock\");\r",
									"});\r",
									"\r",
									"// Check stock value at the body\r",
									"pm.test(\"Stock at the body not empty and must a number type\", function () {\r",
									"\tconst stock = pm.request.body ? JSON.parse(pm.request.body.raw).stock : \"empty\";\r",
									"    pm.expect(stock).not.to.equal(\"empty\");\r",
									"    pm.expect(stock).not.to.equal(undefined);\r",
									"    pm.expect(stock).not.to.equal(\"\");\r",
									"    pm.expect(stock).to.be.a('number');\r",
									" });\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"Feature AI dan Chat GPT dalam pembuatan web 2\",\r\n    \"author\": \"Ignat Deswanto\",\r\n    \"publishedYear\": 2023,\r\n    \"genres\": [\"Pendidikan\", \"Umum\"],\r\n    \"stock\": 11\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{localhost}}/books",
							"host": [
								"{{localhost}}"
							],
							"path": [
								"books"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}